package "ShellWen/sw_socket"

// Values
fn get_host_by_name(String) -> Hostent!Failure

fn new_sockaddr_in() -> SockaddrIn!Failure

fn new_socket(AddrFamily, SocketType, protocol~ : IpProtocol? = ..) -> Socket!Failure

// Types and methods
pub(all) enum AddrFamily {
  AF_INET
}

type Hostent
impl Hostent {
  get_addr(Self) -> UInt
  get_addr_str(Self) -> String!Failure
}

pub(all) enum IpProtocol {
  IPPROTO_IP
  IPPROTO_TCP
  IPPROTO_UDP
}

type SockaddrIn
impl SockaddrIn {
  get_addr(Self) -> UInt
  get_addr_str(Self) -> String!Failure
  get_family(Self) -> AddrFamily!Failure
  get_port(Self) -> UInt16
  set_addr(Self, UInt) -> Unit
  set_addr_str(Self, String) -> Unit!Failure
  set_family(Self, AddrFamily) -> Unit
  set_port(Self, UInt16) -> Unit
}

type Socket
impl Socket {
  accept(Self) -> (Self, SockaddrIn)!Failure
  bind(Self, String, UInt16) -> SockaddrIn!Failure
  bind_addr(Self, SockaddrIn) -> Unit!Failure
  close(Self) -> Unit!Failure
  connect(Self, Hostent, UInt16) -> SockaddrIn!Failure
  connect_addr(Self, SockaddrIn) -> Unit!Failure
  listen(Self, Int) -> Unit!Failure
  recv(Self, Int) -> FixedArray[Byte]!Failure
  recv_buffer(Self, FixedArray[Byte], flags~ : Int = ..) -> Int64!Failure
  recv_from(Self, Int) -> (FixedArray[Byte], SockaddrIn)!Failure
  recv_from_buffer(Self, FixedArray[Byte], flags~ : Int = ..) -> (Int64, SockaddrIn)!Failure
  send[Sendable : Sendable](Self, Sendable, flags~ : Int = ..) -> Int64!Failure
  send_to[SendToAble : SendToAble](Self, SendToAble, SockaddrIn, flags~ : Int = ..) -> Int64!Failure
}

pub(all) enum SocketType {
  SOCK_STREAM
  SOCK_DGRAM
}

// Type aliases

// Traits
trait SendToAble
impl SendToAble for FixedArray[Byte]
impl SendToAble for Bytes

trait Sendable
impl Sendable for FixedArray[Byte]
impl Sendable for Bytes

